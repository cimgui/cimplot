//This file is automatically generated by generator.lua from https://github.com/cimgui/cimplot
//based on implot.h file version 0.9 WIP from implot https://github.com/epezent/implot
//with implot_internal.h api

#include "./implot/implot.h"
#include "cimplot.h"



CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointNil(void)
{
    return IM_NEW(ImPlotPoint)();
}
CIMGUI_API void ImPlotPoint_destroy(ImPlotPoint* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointdouble(double _x,double _y)
{
    return IM_NEW(ImPlotPoint)(_x,_y);
}
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointVec2(const ImVec2 p)
{
    return IM_NEW(ImPlotPoint)(p);
}
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangeNil(void)
{
    return IM_NEW(ImPlotRange)();
}
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangedouble(double _min,double _max)
{
    return IM_NEW(ImPlotRange)(_min,_max);
}
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,double value)
{
    return self->Contains(value);
}
CIMGUI_API double ImPlotRange_Size(ImPlotRange* self)
{
    return self->Size();
}
CIMGUI_API bool ImPlotLimits_ContainsPlotPoInt(ImPlotLimits* self,const ImPlotPoint p)
{
    return self->Contains(p);
}
CIMGUI_API bool ImPlotLimits_Containsdouble(ImPlotLimits* self,double x,double y)
{
    return self->Contains(x,y);
}
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void)
{
    return IM_NEW(ImPlotStyle)();
}
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotInputMap* ImPlotInputMap_ImPlotInputMap(void)
{
    return IM_NEW(ImPlotInputMap)();
}
CIMGUI_API void ImPlotInputMap_destroy(ImPlotInputMap* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotContext* ImPlot_CreateContext()
{
    return ImPlot::CreateContext();
}
CIMGUI_API void ImPlot_DestroyContext(ImPlotContext* ctx)
{
    return ImPlot::DestroyContext(ctx);
}
CIMGUI_API ImPlotContext* ImPlot_GetCurrentContext()
{
    return ImPlot::GetCurrentContext();
}
CIMGUI_API void ImPlot_SetCurrentContext(ImPlotContext* ctx)
{
    return ImPlot::SetCurrentContext(ctx);
}
CIMGUI_API bool ImPlot_BeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags)
{
    return ImPlot::BeginPlot(title_id,x_label,y_label,size,flags,x_flags,y_flags,y2_flags,y3_flags);
}
CIMGUI_API void ImPlot_EndPlot()
{
    return ImPlot::EndPlot();
}
CIMGUI_API void ImPlot_PlotLineFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLinedoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLinedoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset)
{
    return ImPlot::PlotStairsG(label_id,getter,data,count,offset);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsFloatPtrInt(const char* label_id,const float* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsdoublePtrInt(const char* label_id,const double* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS8PtrInt(const char* label_id,const ImS8* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU8PtrInt(const char* label_id,const ImU8* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS16PtrInt(const char* label_id,const ImS16* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU16PtrInt(const char* label_id,const ImU16* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS32PtrInt(const char* label_id,const ImS32* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU32PtrInt(const char* label_id,const ImU32* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS64PtrInt(const char* label_id,const ImS64* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU64PtrInt(const char* label_id,const ImU64* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHFloatPtrInt(const char* label_id,const float* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHdoublePtrInt(const char* label_id,const double* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS8PtrInt(const char* label_id,const ImS8* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU8PtrInt(const char* label_id,const ImU8* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS16PtrInt(const char* label_id,const ImS16* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU16PtrInt(const char* label_id,const ImU16* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS32PtrInt(const char* label_id,const ImS32* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU32PtrInt(const char* label_id,const ImU32* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS64PtrInt(const char* label_id,const ImS64* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU64PtrInt(const char* label_id,const ImU64* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsdoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotPieChartFloatPtr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartdoublePtr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS8Ptr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU8Ptr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS16Ptr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU16Ptr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS32Ptr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU32Ptr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS64Ptr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU64Ptr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotHeatmapFloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapdoublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotDigitalFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitaldoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col)
{
    return ImPlot::PlotImage(label_id,user_texture_id,bounds_min,bounds_max,uv0,uv1,tint_col);
}
CIMGUI_API void ImPlot_PlotText(const char* text,double x,double y,bool vertical,const ImVec2 pix_offset)
{
    return ImPlot::PlotText(text,x,y,vertical,pix_offset);
}
CIMGUI_API void ImPlot_PlotDummy(const char* label_id)
{
    return ImPlot::PlotDummy(label_id);
}
CIMGUI_API void ImPlot_SetNextPlotLimits(double xmin,double xmax,double ymin,double ymax,ImGuiCond cond)
{
    return ImPlot::SetNextPlotLimits(xmin,xmax,ymin,ymax,cond);
}
CIMGUI_API void ImPlot_SetNextPlotLimitsX(double xmin,double xmax,ImGuiCond cond)
{
    return ImPlot::SetNextPlotLimitsX(xmin,xmax,cond);
}
CIMGUI_API void ImPlot_SetNextPlotLimitsY(double ymin,double ymax,ImGuiCond cond,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotLimitsY(ymin,ymax,cond,y_axis);
}
CIMGUI_API void ImPlot_LinkNextPlotLimits(double* xmin,double* xmax,double* ymin,double* ymax,double* ymin2,double* ymax2,double* ymin3,double* ymax3)
{
    return ImPlot::LinkNextPlotLimits(xmin,xmax,ymin,ymax,ymin2,ymax2,ymin3,ymax3);
}
CIMGUI_API void ImPlot_FitNextPlotAxes(bool x,bool y,bool y2,bool y3)
{
    return ImPlot::FitNextPlotAxes(x,y,y2,y3);
}
CIMGUI_API void ImPlot_SetNextPlotTicksXdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default)
{
    return ImPlot::SetNextPlotTicksX(values,n_ticks,labels,show_default);
}
CIMGUI_API void ImPlot_SetNextPlotTicksXdouble(double x_min,double x_max,int n_ticks,const char* const labels[],bool show_default)
{
    return ImPlot::SetNextPlotTicksX(x_min,x_max,n_ticks,labels,show_default);
}
CIMGUI_API void ImPlot_SetNextPlotTicksYdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotTicksY(values,n_ticks,labels,show_default,y_axis);
}
CIMGUI_API void ImPlot_SetNextPlotTicksYdouble(double y_min,double y_max,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotTicksY(y_min,y_max,n_ticks,labels,show_default,y_axis);
}
CIMGUI_API void ImPlot_SetPlotYAxis(ImPlotYAxis y_axis)
{
    return ImPlot::SetPlotYAxis(y_axis);
}
CIMGUI_API void ImPlot_HideNextItem(bool hidden,ImGuiCond cond)
{
    return ImPlot::HideNextItem(hidden,cond);
}
CIMGUI_API void ImPlot_PixelsToPlotVec2(ImPlotPoint *pOut,const ImVec2 pix,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(pix,y_axis);
}
CIMGUI_API void ImPlot_PixelsToPlotFloat(ImPlotPoint *pOut,float x,float y,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(x,y,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixelsPlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(plt,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixelsdouble(ImVec2 *pOut,double x,double y,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(x,y,y_axis);
}
CIMGUI_API void ImPlot_GetPlotPos(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotPos();
}
CIMGUI_API void ImPlot_GetPlotSize(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotSize();
}
CIMGUI_API bool ImPlot_IsPlotHovered()
{
    return ImPlot::IsPlotHovered();
}
CIMGUI_API bool ImPlot_IsPlotXAxisHovered()
{
    return ImPlot::IsPlotXAxisHovered();
}
CIMGUI_API bool ImPlot_IsPlotYAxisHovered(ImPlotYAxis y_axis)
{
    return ImPlot::IsPlotYAxisHovered(y_axis);
}
CIMGUI_API void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotMousePos(y_axis);
}
CIMGUI_API void ImPlot_GetPlotLimits(ImPlotLimits *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotLimits(y_axis);
}
CIMGUI_API bool ImPlot_IsPlotQueried()
{
    return ImPlot::IsPlotQueried();
}
CIMGUI_API void ImPlot_GetPlotQuery(ImPlotLimits *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotQuery(y_axis);
}
CIMGUI_API void ImPlot_AnnotateStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateV(x,y,pix_offset,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateV(x,y,pix_offset,color,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args)
{
    return ImPlot::AnnotateV(x,y,pix_offset,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args)
{
    return ImPlot::AnnotateV(x,y,pix_offset,color,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateClampedStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateClampedV(x,y,pix_offset,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateClampedVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateClampedV(x,y,pix_offset,color,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateClampedVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args)
{
    return ImPlot::AnnotateClampedV(x,y,pix_offset,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateClampedVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args)
{
    return ImPlot::AnnotateClampedV(x,y,pix_offset,color,fmt,args);
}
CIMGUI_API bool ImPlot_DragLineX(const char* id,double* x_value,bool show_label,const ImVec4 col,float thickness)
{
    return ImPlot::DragLineX(id,x_value,show_label,col,thickness);
}
CIMGUI_API bool ImPlot_DragLineY(const char* id,double* y_value,bool show_label,const ImVec4 col,float thickness)
{
    return ImPlot::DragLineY(id,y_value,show_label,col,thickness);
}
CIMGUI_API bool ImPlot_DragPoint(const char* id,double* x,double* y,bool show_label,const ImVec4 col,float radius)
{
    return ImPlot::DragPoint(id,x,y,show_label,col,radius);
}
CIMGUI_API void ImPlot_SetLegendLocation(ImPlotLocation location,ImPlotOrientation orientation,bool outside)
{
    return ImPlot::SetLegendLocation(location,orientation,outside);
}
CIMGUI_API void ImPlot_SetMousePosLocation(ImPlotLocation location)
{
    return ImPlot::SetMousePosLocation(location);
}
CIMGUI_API bool ImPlot_IsLegendEntryHovered(const char* label_id)
{
    return ImPlot::IsLegendEntryHovered(label_id);
}
CIMGUI_API bool ImPlot_BeginLegendDragDropSource(const char* label_id,ImGuiDragDropFlags flags)
{
    return ImPlot::BeginLegendDragDropSource(label_id,flags);
}
CIMGUI_API void ImPlot_EndLegendDragDropSource()
{
    return ImPlot::EndLegendDragDropSource();
}
CIMGUI_API bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button)
{
    return ImPlot::BeginLegendPopup(label_id,mouse_button);
}
CIMGUI_API void ImPlot_EndLegendPopup()
{
    return ImPlot::EndLegendPopup();
}
CIMGUI_API ImPlotStyle* ImPlot_GetStyle()
{
    return &ImPlot::GetStyle();
}
CIMGUI_API void ImPlot_StyleColorsAuto(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsAuto(dst);
}
CIMGUI_API void ImPlot_StyleColorsClassic(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsClassic(dst);
}
CIMGUI_API void ImPlot_StyleColorsDark(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsDark(dst);
}
CIMGUI_API void ImPlot_StyleColorsLight(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsLight(dst);
}
CIMGUI_API void ImPlot_PushStyleColorU32(ImPlotCol idx,ImU32 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PushStyleColorVec4(ImPlotCol idx,const ImVec4 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PopStyleColor(int count)
{
    return ImPlot::PopStyleColor(count);
}
CIMGUI_API void ImPlot_PushStyleVarFloat(ImPlotStyleVar idx,float val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVarInt(ImPlotStyleVar idx,int val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVarVec2(ImPlotStyleVar idx,const ImVec2 val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PopStyleVar(int count)
{
    return ImPlot::PopStyleVar(count);
}
CIMGUI_API void ImPlot_SetNextLineStyle(const ImVec4 col,float weight)
{
    return ImPlot::SetNextLineStyle(col,weight);
}
CIMGUI_API void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod)
{
    return ImPlot::SetNextFillStyle(col,alpha_mod);
}
CIMGUI_API void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline)
{
    return ImPlot::SetNextMarkerStyle(marker,size,fill,weight,outline);
}
CIMGUI_API void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight)
{
    return ImPlot::SetNextErrorBarStyle(col,size,weight);
}
CIMGUI_API void ImPlot_GetLastItemColor(ImVec4 *pOut)
{
    *pOut = ImPlot::GetLastItemColor();
}
CIMGUI_API const char* ImPlot_GetStyleColorName(ImPlotCol idx)
{
    return ImPlot::GetStyleColorName(idx);
}
CIMGUI_API const char* ImPlot_GetMarkerName(ImPlotMarker idx)
{
    return ImPlot::GetMarkerName(idx);
}
CIMGUI_API void ImPlot_PushColormapPlotColormap(ImPlotColormap colormap)
{
    return ImPlot::PushColormap(colormap);
}
CIMGUI_API void ImPlot_PushColormapVec4Ptr(const ImVec4* colormap,int size)
{
    return ImPlot::PushColormap(colormap,size);
}
CIMGUI_API void ImPlot_PopColormap(int count)
{
    return ImPlot::PopColormap(count);
}
CIMGUI_API void ImPlot_SetColormapVec4Ptr(const ImVec4* colormap,int size)
{
    return ImPlot::SetColormap(colormap,size);
}
CIMGUI_API void ImPlot_SetColormapPlotColormap(ImPlotColormap colormap,int samples)
{
    return ImPlot::SetColormap(colormap,samples);
}
CIMGUI_API int ImPlot_GetColormapSize()
{
    return ImPlot::GetColormapSize();
}
CIMGUI_API void ImPlot_GetColormapColor(ImVec4 *pOut,int index)
{
    *pOut = ImPlot::GetColormapColor(index);
}
CIMGUI_API void ImPlot_LerpColormapFloat(ImVec4 *pOut,float t)
{
    *pOut = ImPlot::LerpColormap(t);
}
CIMGUI_API void ImPlot_NextColormapColor(ImVec4 *pOut)
{
    *pOut = ImPlot::NextColormapColor();
}
CIMGUI_API void ImPlot_ShowColormapScale(double scale_min,double scale_max,float height)
{
    return ImPlot::ShowColormapScale(scale_min,scale_max,height);
}
CIMGUI_API const char* ImPlot_GetColormapName(ImPlotColormap colormap)
{
    return ImPlot::GetColormapName(colormap);
}
CIMGUI_API ImPlotInputMap* ImPlot_GetInputMap()
{
    return &ImPlot::GetInputMap();
}
CIMGUI_API ImDrawList* ImPlot_GetPlotDrawList()
{
    return ImPlot::GetPlotDrawList();
}
CIMGUI_API void ImPlot_PushPlotClipRect()
{
    return ImPlot::PushPlotClipRect();
}
CIMGUI_API void ImPlot_PopPlotClipRect()
{
    return ImPlot::PopPlotClipRect();
}
CIMGUI_API bool ImPlot_ShowStyleSelector(const char* label)
{
    return ImPlot::ShowStyleSelector(label);
}
CIMGUI_API bool ImPlot_ShowColormapSelector(const char* label)
{
    return ImPlot::ShowColormapSelector(label);
}
CIMGUI_API void ImPlot_ShowStyleEditor(ImPlotStyle* ref)
{
    return ImPlot::ShowStyleEditor(ref);
}
CIMGUI_API void ImPlot_ShowUserGuide()
{
    return ImPlot::ShowUserGuide();
}
CIMGUI_API void ImPlot_ShowMetricsWindow(bool* p_popen)
{
    return ImPlot::ShowMetricsWindow(p_popen);
}
CIMGUI_API void ImPlot_SetImGuiContext(ImGuiContext* ctx)
{
    return ImPlot::SetImGuiContext(ctx);
}
CIMGUI_API void ImPlot_ShowDemoWindow(bool* p_open)
{
    return ImPlot::ShowDemoWindow(p_open);
}
CIMGUI_API float ImPlot_ImLog10Float(float x)
{
    return ImLog10(x);
}
CIMGUI_API double ImPlot_ImLog10double(double x)
{
    return ImLog10(x);
}
CIMGUI_API float ImPlot_ImRemapFloat(float x,float x0,float x1,float y0,float y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API double ImPlot_ImRemapdouble(double x,double x0,double x1,double y0,double y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImS8 ImPlot_ImRemapS8(ImS8 x,ImS8 x0,ImS8 x1,ImS8 y0,ImS8 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImU8 ImPlot_ImRemapU8(ImU8 x,ImU8 x0,ImU8 x1,ImU8 y0,ImU8 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImS16 ImPlot_ImRemapS16(ImS16 x,ImS16 x0,ImS16 x1,ImS16 y0,ImS16 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImU16 ImPlot_ImRemapU16(ImU16 x,ImU16 x0,ImU16 x1,ImU16 y0,ImU16 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImS32 ImPlot_ImRemapS32(ImS32 x,ImS32 x0,ImS32 x1,ImS32 y0,ImS32 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImU32 ImPlot_ImRemapU32(ImU32 x,ImU32 x0,ImU32 x1,ImU32 y0,ImU32 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImS64 ImPlot_ImRemapS64(ImS64 x,ImS64 x0,ImS64 x1,ImS64 y0,ImS64 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API ImU64 ImPlot_ImRemapU64(ImU64 x,ImU64 x0,ImU64 x1,ImU64 y0,ImU64 y1)
{
    return ImRemap(x,x0,x1,y0,y1);
}
CIMGUI_API int ImPlot_ImPosMod(int l,int r)
{
    return ImPosMod(l,r);
}
CIMGUI_API bool ImPlot_ImNanOrInf(double val)
{
    return ImNanOrInf(val);
}
CIMGUI_API double ImPlot_ImConstrainNan(double val)
{
    return ImConstrainNan(val);
}
CIMGUI_API double ImPlot_ImConstrainInf(double val)
{
    return ImConstrainInf(val);
}
CIMGUI_API double ImPlot_ImConstrainLog(double val)
{
    return ImConstrainLog(val);
}
CIMGUI_API double ImPlot_ImConstrainTime(double val)
{
    return ImConstrainTime(val);
}
CIMGUI_API bool ImPlot_ImAlmostEqual(double v1,double v2,int ulp)
{
    return ImAlmostEqual(v1,v2,ulp);
}
CIMGUI_API ImBufferWriter* ImBufferWriter_ImBufferWriter(char* buffer,int size)
{
    return IM_NEW(ImBufferWriter)(buffer,size);
}
CIMGUI_API void ImBufferWriter_destroy(ImBufferWriter* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImBufferWriter_Write(ImBufferWriter* self,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    self->WriteV(fmt,args);
    va_end(args);
}
CIMGUI_API void ImBufferWriter_WriteV(ImBufferWriter* self,const char* fmt,va_list args)
{
    return self->WriteV(fmt,args);
}
CIMGUI_API ImPlotDateTimeFmt* ImPlotDateTimeFmt_ImPlotDateTimeFmt(ImPlotDateFmt date_fmt,ImPlotTimeFmt time_fmt,bool use_24_hr_clk,bool use_iso_8601)
{
    return IM_NEW(ImPlotDateTimeFmt)(date_fmt,time_fmt,use_24_hr_clk,use_iso_8601);
}
CIMGUI_API void ImPlotDateTimeFmt_destroy(ImPlotDateTimeFmt* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotTime* ImPlotTime_ImPlotTimeNil(void)
{
    return IM_NEW(ImPlotTime)();
}
CIMGUI_API void ImPlotTime_destroy(ImPlotTime* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotTime* ImPlotTime_ImPlotTimetime_t(time_t s,int us)
{
    return IM_NEW(ImPlotTime)(s,us);
}
CIMGUI_API void ImPlotTime_RollOver(ImPlotTime* self)
{
    return self->RollOver();
}
CIMGUI_API double ImPlotTime_ToDouble(ImPlotTime* self)
{
    return self->ToDouble();
}
CIMGUI_API ImPlotTime ImPlotTime_FromDouble(double t)
{
    return ImPlotTime::FromDouble(t);
}
CIMGUI_API ImPlotColormapMod* ImPlotColormapMod_ImPlotColormapMod(const ImVec4* colormap,int colormap_size)
{
    return IM_NEW(ImPlotColormapMod)(colormap,colormap_size);
}
CIMGUI_API void ImPlotColormapMod_destroy(ImPlotColormapMod* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotPointError* ImPlotPointError_ImPlotPointError(double x,double y,double neg,double pos)
{
    return IM_NEW(ImPlotPointError)(x,y,neg,pos);
}
CIMGUI_API void ImPlotPointError_destroy(ImPlotPointError* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotAnnotationCollection* ImPlotAnnotationCollection_ImPlotAnnotationCollection(void)
{
    return IM_NEW(ImPlotAnnotationCollection)();
}
CIMGUI_API void ImPlotAnnotationCollection_destroy(ImPlotAnnotationCollection* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImPlotAnnotationCollection_AppendV(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,va_list args)
{
    return self->AppendV(pos,off,bg,fg,clamp,fmt,args);
}
CIMGUI_API void ImPlotAnnotationCollection_Append(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    self->AppendV(pos,off,bg,fg,clamp,fmt,args);
    va_end(args);
}
CIMGUI_API const char* ImPlotAnnotationCollection_GetText(ImPlotAnnotationCollection* self,int idx)
{
    return self->GetText(idx);
}
CIMGUI_API void ImPlotAnnotationCollection_Reset(ImPlotAnnotationCollection* self)
{
    return self->Reset();
}
CIMGUI_API ImPlotTick* ImPlotTick_ImPlotTick(double value,bool major,bool show_label)
{
    return IM_NEW(ImPlotTick)(value,major,show_label);
}
CIMGUI_API void ImPlotTick_destroy(ImPlotTick* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotTickCollection* ImPlotTickCollection_ImPlotTickCollection(void)
{
    return IM_NEW(ImPlotTickCollection)();
}
CIMGUI_API void ImPlotTickCollection_destroy(ImPlotTickCollection* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImPlotTickCollection_AppendPlotTick(ImPlotTickCollection* self,const ImPlotTick tick)
{
    return self->Append(tick);
}
CIMGUI_API void ImPlotTickCollection_Appenddouble(ImPlotTickCollection* self,double value,bool major,bool show_label,void(*labeler)(ImPlotTick& tick,ImGuiTextBuffer& buf))
{
    return self->Append(value,major,show_label,labeler);
}
CIMGUI_API const char* ImPlotTickCollection_GetText(ImPlotTickCollection* self,int idx)
{
    return self->GetText(idx);
}
CIMGUI_API void ImPlotTickCollection_Reset(ImPlotTickCollection* self)
{
    return self->Reset();
}
CIMGUI_API ImPlotAxis* ImPlotAxis_ImPlotAxis(void)
{
    return IM_NEW(ImPlotAxis)();
}
CIMGUI_API void ImPlotAxis_destroy(ImPlotAxis* self)
{
    IM_DELETE(self);
}
CIMGUI_API bool ImPlotAxis_SetMin(ImPlotAxis* self,double _min)
{
    return self->SetMin(_min);
}
CIMGUI_API bool ImPlotAxis_SetMax(ImPlotAxis* self,double _max)
{
    return self->SetMax(_max);
}
CIMGUI_API void ImPlotAxis_SetRangedouble(ImPlotAxis* self,double _min,double _max)
{
    return self->SetRange(_min,_max);
}
CIMGUI_API void ImPlotAxis_SetRangePlotRange(ImPlotAxis* self,const ImPlotRange range)
{
    return self->SetRange(range);
}
CIMGUI_API void ImPlotAxis_SetAspect(ImPlotAxis* self,double unit_per_pix)
{
    return self->SetAspect(unit_per_pix);
}
CIMGUI_API double ImPlotAxis_GetAspect(ImPlotAxis* self)
{
    return self->GetAspect();
}
CIMGUI_API void ImPlotAxis_Constrain(ImPlotAxis* self)
{
    return self->Constrain();
}
CIMGUI_API bool ImPlotAxis_IsLabeled(ImPlotAxis* self)
{
    return self->IsLabeled();
}
CIMGUI_API bool ImPlotAxis_IsInverted(ImPlotAxis* self)
{
    return self->IsInverted();
}
CIMGUI_API bool ImPlotAxis_IsAlwaysLocked(ImPlotAxis* self)
{
    return self->IsAlwaysLocked();
}
CIMGUI_API bool ImPlotAxis_IsLockedMin(ImPlotAxis* self)
{
    return self->IsLockedMin();
}
CIMGUI_API bool ImPlotAxis_IsLockedMax(ImPlotAxis* self)
{
    return self->IsLockedMax();
}
CIMGUI_API bool ImPlotAxis_IsLocked(ImPlotAxis* self)
{
    return self->IsLocked();
}
CIMGUI_API bool ImPlotAxis_IsTime(ImPlotAxis* self)
{
    return self->IsTime();
}
CIMGUI_API bool ImPlotAxis_IsLog(ImPlotAxis* self)
{
    return self->IsLog();
}
CIMGUI_API ImPlotItem* ImPlotItem_ImPlotItem(void)
{
    return IM_NEW(ImPlotItem)();
}
CIMGUI_API void ImPlotItem_destroy(ImPlotItem* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImPlotLegendData_Reset(ImPlotLegendData* self)
{
    return self->Reset();
}
CIMGUI_API ImPlotPlot* ImPlotPlot_ImPlotPlot(void)
{
    return IM_NEW(ImPlotPlot)();
}
CIMGUI_API void ImPlotPlot_destroy(ImPlotPlot* self)
{
    IM_DELETE(self);
}
CIMGUI_API int ImPlotPlot_GetLegendCount(ImPlotPlot* self)
{
    return self->GetLegendCount();
}
CIMGUI_API ImPlotItem* ImPlotPlot_GetLegendItem(ImPlotPlot* self,int i)
{
    return self->GetLegendItem(i);
}
CIMGUI_API const char* ImPlotPlot_GetLegendLabel(ImPlotPlot* self,int i)
{
    return self->GetLegendLabel(i);
}
CIMGUI_API bool ImPlotPlot_IsLocked(ImPlotPlot* self)
{
    return self->IsLocked();
}
CIMGUI_API ImPlotNextPlotData* ImPlotNextPlotData_ImPlotNextPlotData(void)
{
    return IM_NEW(ImPlotNextPlotData)();
}
CIMGUI_API void ImPlotNextPlotData_destroy(ImPlotNextPlotData* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImPlotNextPlotData_Reset(ImPlotNextPlotData* self)
{
    return self->Reset();
}
CIMGUI_API ImPlotNextItemData* ImPlotNextItemData_ImPlotNextItemData(void)
{
    return IM_NEW(ImPlotNextItemData)();
}
CIMGUI_API void ImPlotNextItemData_destroy(ImPlotNextItemData* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImPlotNextItemData_Reset(ImPlotNextItemData* self)
{
    return self->Reset();
}
CIMGUI_API void ImPlot_Initialize(ImPlotContext* ctx)
{
    return ImPlot::Initialize(ctx);
}
CIMGUI_API void ImPlot_Reset(ImPlotContext* ctx)
{
    return ImPlot::Reset(ctx);
}
CIMGUI_API ImPlotPlot* ImPlot_GetPlot(const char* title)
{
    return ImPlot::GetPlot(title);
}
CIMGUI_API ImPlotPlot* ImPlot_GetCurrentPlot()
{
    return ImPlot::GetCurrentPlot();
}
CIMGUI_API void ImPlot_BustPlotCache()
{
    return ImPlot::BustPlotCache();
}
CIMGUI_API void ImPlot_ShowPlotContextMenu(ImPlotPlot* plot)
{
    return ImPlot::ShowPlotContextMenu(*plot);
}
CIMGUI_API bool ImPlot_BeginItem(const char* label_id,ImPlotCol recolor_from)
{
    return ImPlot::BeginItem(label_id,recolor_from);
}
CIMGUI_API void ImPlot_EndItem()
{
    return ImPlot::EndItem();
}
CIMGUI_API ImPlotItem* ImPlot_RegisterOrGetItem(const char* label_id,bool* just_created)
{
    return ImPlot::RegisterOrGetItem(label_id,just_created);
}
CIMGUI_API ImPlotItem* ImPlot_GetItem(const char* label_id)
{
    return ImPlot::GetItem(label_id);
}
CIMGUI_API ImPlotItem* ImPlot_GetCurrentItem()
{
    return ImPlot::GetCurrentItem();
}
CIMGUI_API void ImPlot_BustItemCache()
{
    return ImPlot::BustItemCache();
}
CIMGUI_API int ImPlot_GetCurrentYAxis()
{
    return ImPlot::GetCurrentYAxis();
}
CIMGUI_API void ImPlot_UpdateAxisColors(int axis_flag,ImPlotAxis* axis)
{
    return ImPlot::UpdateAxisColors(axis_flag,axis);
}
CIMGUI_API void ImPlot_UpdateTransformCache()
{
    return ImPlot::UpdateTransformCache();
}
CIMGUI_API ImPlotScale ImPlot_GetCurrentScale()
{
    return ImPlot::GetCurrentScale();
}
CIMGUI_API bool ImPlot_FitThisFrame()
{
    return ImPlot::FitThisFrame();
}
CIMGUI_API void ImPlot_FitPoint(const ImPlotPoint p)
{
    return ImPlot::FitPoint(p);
}
CIMGUI_API bool ImPlot_RangesOverlap(const ImPlotRange r1,const ImPlotRange r2)
{
    return ImPlot::RangesOverlap(r1,r2);
}
CIMGUI_API void ImPlot_PushLinkedAxis(ImPlotAxis* axis)
{
    return ImPlot::PushLinkedAxis(*axis);
}
CIMGUI_API void ImPlot_PullLinkedAxis(ImPlotAxis* axis)
{
    return ImPlot::PullLinkedAxis(*axis);
}
CIMGUI_API void ImPlot_ShowAxisContextMenu(ImPlotAxis* axis,ImPlotAxis* equal_axis,bool time_allowed)
{
    return ImPlot::ShowAxisContextMenu(*axis,equal_axis,time_allowed);
}
CIMGUI_API void ImPlot_GetLocationPos(ImVec2 *pOut,const ImRect outer_rect,const ImVec2 inner_size,ImPlotLocation location,const ImVec2 pad)
{
    *pOut = ImPlot::GetLocationPos(outer_rect,inner_size,location,pad);
}
CIMGUI_API void ImPlot_CalcLegendSize(ImVec2 *pOut,ImPlotPlot* plot,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation)
{
    *pOut = ImPlot::CalcLegendSize(*plot,pad,spacing,orientation);
}
CIMGUI_API void ImPlot_ShowLegendEntries(ImPlotPlot* plot,const ImRect legend_bb,bool interactable,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation,ImDrawList* DrawList)
{
    return ImPlot::ShowLegendEntries(*plot,legend_bb,interactable,pad,spacing,orientation,*DrawList);
}
CIMGUI_API void ImPlot_ShowAltLegend(const char* title_id,ImPlotOrientation orientation,const ImVec2 size,bool interactable)
{
    return ImPlot::ShowAltLegend(title_id,orientation,size,interactable);
}
CIMGUI_API void ImPlot_LabelTickDefault(ImPlotTick* tick,ImGuiTextBuffer* buffer)
{
    return ImPlot::LabelTickDefault(*tick,*buffer);
}
CIMGUI_API void ImPlot_LabelTickScientific(ImPlotTick* tick,ImGuiTextBuffer* buffer)
{
    return ImPlot::LabelTickScientific(*tick,*buffer);
}
CIMGUI_API void ImPlot_LabelTickTime(ImPlotTick* tick,ImGuiTextBuffer* buffer,const ImPlotTime t,ImPlotDateTimeFmt fmt)
{
    return ImPlot::LabelTickTime(*tick,*buffer,t,fmt);
}
CIMGUI_API void ImPlot_AddTicksDefault(const ImPlotRange range,int nMajor,int nMinor,ImPlotTickCollection* ticks)
{
    return ImPlot::AddTicksDefault(range,nMajor,nMinor,*ticks);
}
CIMGUI_API void ImPlot_AddTicksLogarithmic(const ImPlotRange range,int nMajor,ImPlotTickCollection* ticks)
{
    return ImPlot::AddTicksLogarithmic(range,nMajor,*ticks);
}
CIMGUI_API void ImPlot_AddTicksTime(const ImPlotRange range,float plot_width,ImPlotTickCollection* ticks)
{
    return ImPlot::AddTicksTime(range,plot_width,*ticks);
}
CIMGUI_API void ImPlot_AddTicksCustom(const double* values,const char* const labels[],int n,ImPlotTickCollection* ticks)
{
    return ImPlot::AddTicksCustom(values,labels,n,*ticks);
}
CIMGUI_API int ImPlot_LabelAxisValue(const ImPlotAxis axis,const ImPlotTickCollection ticks,double value,char* buff,int size)
{
    return ImPlot::LabelAxisValue(axis,ticks,value,buff,size);
}
CIMGUI_API const ImPlotNextItemData* ImPlot_GetItemData()
{
    return &ImPlot::GetItemData();
}
CIMGUI_API bool ImPlot_IsColorAutoVec4(const ImVec4 col)
{
    return ImPlot::IsColorAuto(col);
}
CIMGUI_API bool ImPlot_IsColorAutoPlotCol(ImPlotCol idx)
{
    return ImPlot::IsColorAuto(idx);
}
CIMGUI_API void ImPlot_GetAutoColor(ImVec4 *pOut,ImPlotCol idx)
{
    *pOut = ImPlot::GetAutoColor(idx);
}
CIMGUI_API void ImPlot_GetStyleColorVec4(ImVec4 *pOut,ImPlotCol idx)
{
    *pOut = ImPlot::GetStyleColorVec4(idx);
}
CIMGUI_API ImU32 ImPlot_GetStyleColorU32(ImPlotCol idx)
{
    return ImPlot::GetStyleColorU32(idx);
}
CIMGUI_API const ImVec4* ImPlot_GetColormap(ImPlotColormap colormap,int* size_out)
{
    return ImPlot::GetColormap(colormap,size_out);
}
CIMGUI_API void ImPlot_LerpColormapVec4Ptr(ImVec4 *pOut,const ImVec4* colormap,int size,float t)
{
    *pOut = ImPlot::LerpColormap(colormap,size,t);
}
CIMGUI_API void ImPlot_ResampleColormap(const ImVec4* colormap_in,int size_in,ImVec4* colormap_out,int size_out)
{
    return ImPlot::ResampleColormap(colormap_in,size_in,colormap_out,size_out);
}
CIMGUI_API void ImPlot_AddTextVertical(ImDrawList* DrawList,ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end)
{
    return ImPlot::AddTextVertical(DrawList,pos,col,text_begin,text_end);
}
CIMGUI_API void ImPlot_CalcTextSizeVertical(ImVec2 *pOut,const char* text)
{
    *pOut = ImPlot::CalcTextSizeVertical(text);
}
CIMGUI_API ImU32 ImPlot_CalcTextColor(const ImVec4 bg)
{
    return ImPlot::CalcTextColor(bg);
}
CIMGUI_API void ImPlot_ClampLabelPos(ImVec2 *pOut,ImVec2 pos,const ImVec2 size,const ImVec2 Min,const ImVec2 Max)
{
    *pOut = ImPlot::ClampLabelPos(pos,size,Min,Max);
}
CIMGUI_API double ImPlot_NiceNum(double x,bool round)
{
    return ImPlot::NiceNum(x,round);
}
CIMGUI_API int ImPlot_OrderOfMagnitude(double val)
{
    return ImPlot::OrderOfMagnitude(val);
}
CIMGUI_API int ImPlot_OrderToPrecision(int order)
{
    return ImPlot::OrderToPrecision(order);
}
CIMGUI_API int ImPlot_Precision(double val)
{
    return ImPlot::Precision(val);
}
CIMGUI_API void ImPlot_Intersection(ImVec2 *pOut,const ImVec2 a1,const ImVec2 a2,const ImVec2 b1,const ImVec2 b2)
{
    *pOut = ImPlot::Intersection(a1,a2,b1,b2);
}
CIMGUI_API void ImPlot_FillRangeVector_FloatPtr(ImVector_float* buffer,int n,float vmin,float vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_doublePtr(ImVector_double* buffer,int n,double vmin,double vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_S8Ptr(ImVector_ImS8* buffer,int n,ImS8 vmin,ImS8 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_U8Ptr(ImVector_ImU8* buffer,int n,ImU8 vmin,ImU8 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_S16Ptr(ImVector_ImS16* buffer,int n,ImS16 vmin,ImS16 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_U16Ptr(ImVector_ImU16* buffer,int n,ImU16 vmin,ImU16 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_S32Ptr(ImVector_ImS32* buffer,int n,ImS32 vmin,ImS32 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_U32Ptr(ImVector_ImU32* buffer,int n,ImU32 vmin,ImU32 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_S64Ptr(ImVector_ImS64* buffer,int n,ImS64 vmin,ImS64 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API void ImPlot_FillRangeVector_U64Ptr(ImVector_ImU64* buffer,int n,ImU64 vmin,ImU64 vmax)
{
    return ImPlot::FillRange(*buffer,n,vmin,vmax);
}
CIMGUI_API float ImPlot_OffsetAndStrideFloatPtr(const float* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API double ImPlot_OffsetAndStridedoublePtr(const double* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImS8 ImPlot_OffsetAndStrideS8Ptr(const ImS8* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImU8 ImPlot_OffsetAndStrideU8Ptr(const ImU8* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImS16 ImPlot_OffsetAndStrideS16Ptr(const ImS16* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImU16 ImPlot_OffsetAndStrideU16Ptr(const ImU16* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImS32 ImPlot_OffsetAndStrideS32Ptr(const ImS32* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImU32 ImPlot_OffsetAndStrideU32Ptr(const ImU32* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImS64 ImPlot_OffsetAndStrideS64Ptr(const ImS64* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API ImU64 ImPlot_OffsetAndStrideU64Ptr(const ImU64* data,int idx,int count,int offset,int stride)
{
    return ImPlot::OffsetAndStride(data,idx,count,offset,stride);
}
CIMGUI_API bool ImPlot_IsLeapYear(int year)
{
    return ImPlot::IsLeapYear(year);
}
CIMGUI_API int ImPlot_GetDaysInMonth(int year,int month)
{
    return ImPlot::GetDaysInMonth(year,month);
}
CIMGUI_API ImPlotTime ImPlot_MkGmtTime(struct tm* ptm)
{
    return ImPlot::MkGmtTime(ptm);
}
CIMGUI_API tm* ImPlot_GetGmtTime(const ImPlotTime t,tm* ptm)
{
    return ImPlot::GetGmtTime(t,ptm);
}
CIMGUI_API ImPlotTime ImPlot_MkLocTime(struct tm* ptm)
{
    return ImPlot::MkLocTime(ptm);
}
CIMGUI_API tm* ImPlot_GetLocTime(const ImPlotTime t,tm* ptm)
{
    return ImPlot::GetLocTime(t,ptm);
}
CIMGUI_API ImPlotTime ImPlot_MakeTime(int year,int month,int day,int hour,int min,int sec,int us)
{
    return ImPlot::MakeTime(year,month,day,hour,min,sec,us);
}
CIMGUI_API int ImPlot_GetYear(const ImPlotTime t)
{
    return ImPlot::GetYear(t);
}
CIMGUI_API ImPlotTime ImPlot_AddTime(const ImPlotTime t,ImPlotTimeUnit unit,int count)
{
    return ImPlot::AddTime(t,unit,count);
}
CIMGUI_API ImPlotTime ImPlot_FloorTime(const ImPlotTime t,ImPlotTimeUnit unit)
{
    return ImPlot::FloorTime(t,unit);
}
CIMGUI_API ImPlotTime ImPlot_CeilTime(const ImPlotTime t,ImPlotTimeUnit unit)
{
    return ImPlot::CeilTime(t,unit);
}
CIMGUI_API ImPlotTime ImPlot_RoundTime(const ImPlotTime t,ImPlotTimeUnit unit)
{
    return ImPlot::RoundTime(t,unit);
}
CIMGUI_API ImPlotTime ImPlot_CombineDateTime(const ImPlotTime date_part,const ImPlotTime time_part)
{
    return ImPlot::CombineDateTime(date_part,time_part);
}
CIMGUI_API int ImPlot_FormatTime(const ImPlotTime t,char* buffer,int size,ImPlotTimeFmt fmt,bool use_24_hr_clk)
{
    return ImPlot::FormatTime(t,buffer,size,fmt,use_24_hr_clk);
}
CIMGUI_API int ImPlot_FormatDate(const ImPlotTime t,char* buffer,int size,ImPlotDateFmt fmt,bool use_iso_8601)
{
    return ImPlot::FormatDate(t,buffer,size,fmt,use_iso_8601);
}
CIMGUI_API int ImPlot_FormatDateTime(const ImPlotTime t,char* buffer,int size,ImPlotDateTimeFmt fmt)
{
    return ImPlot::FormatDateTime(t,buffer,size,fmt);
}
CIMGUI_API bool ImPlot_ShowDatePicker(const char* id,int* level,ImPlotTime* t,const ImPlotTime* t1,const ImPlotTime* t2)
{
    return ImPlot::ShowDatePicker(id,level,t,t1,t2);
}
CIMGUI_API bool ImPlot_ShowTimePicker(const char* id,ImPlotTime* t)
{
    return ImPlot::ShowTimePicker(id,t);
}
CIMGUI_API void ImPlot_PlotRectsFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotRects(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotRectsdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotRects(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotRectsFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset)
{
    return ImPlot::PlotRects(label_id,getter,data,count,offset);
}


//ImPlotPoint getters manually wrapped for taking getters modifying ImPlotPoint*

ImPlotPoint_getter getter_funcX;
ImPlotPoint_getter getter_funcX2;

ImPlotPoint Wrapper(void* data, int idx)
{
	ImPlotPoint pp;
	getter_funcX(data, idx, &pp);
	return pp;
}

ImPlotPoint Wrapper2(void* data, int idx)
{
	ImPlotPoint pp;
	getter_funcX2(data, idx, &pp);
	return pp;
}

CIMGUI_API void ImPlot_PlotLineG(const char* label_id, ImPlotPoint_getter getter,void* data,int count,int offset)
{
    getter_funcX = getter;
	ImPlot::PlotLineG(label_id,Wrapper,data,count,offset);
}

CIMGUI_API  void ImPlot_PlotScatterG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotScatterG(label_id, Wrapper, data, count, offset);
}

CIMGUI_API void ImPlot_PlotShadedG(const char* label_id, ImPlotPoint_getter getter1, void* data1, ImPlotPoint_getter getter2, void* data2, int count, int offset)
{
	getter_funcX = getter1;
	getter_funcX2 = getter2;
	ImPlot::PlotShadedG(label_id, Wrapper, data1, Wrapper2, data2, count, offset);
}

CIMGUI_API void ImPlot_PlotBarsG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double width, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotBarsG(label_id, Wrapper, data, count, width, offset);
}

CIMGUI_API void ImPlot_PlotBarsHG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double height,  int offset)
{
	getter_funcX = getter;
	ImPlot::PlotBarsHG(label_id, Wrapper, data, count, height, offset);
}

CIMGUI_API void ImPlot_PlotDigitalG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotDigitalG(label_id, Wrapper, data, count, offset);
}