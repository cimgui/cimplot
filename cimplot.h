//This file is automatically generated by generator.lua from https://github.com/cimgui/cimplot
//based on implot.h file version 0.9 WIP from implot https://github.com/epezent/implot
//with implot_internal.h api
#ifndef CIMGUIPLOT_INCLUDED
#define CIMGUIPLOT_INCLUDED
#include <stdio.h>
#include <stdint.h>
#if defined _WIN32 || defined __CYGWIN__
    #ifdef CIMGUI_NO_EXPORT
        #define API
    #else
        #define API __declspec(dllexport)
    #endif
    #ifndef __GNUC__
    #define snprintf sprintf_s
    #endif
#else
    #ifdef __GNUC__
        #define API  __attribute__((__visibility__("default")))
    #else
        #define API
    #endif
#endif

#if defined __cplusplus
    #define EXTERN extern "C"
#else
    #include <stdarg.h>
    #include <stdbool.h>
    #define EXTERN extern
#endif

#define CIMGUI_API EXTERN API
#define CONST const


#ifdef _MSC_VER
typedef unsigned __int64 ImU64;
#else
//typedef unsigned long long ImU64;
#endif


#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef struct ImPlotNextItemData ImPlotNextItemData;
typedef struct ImPlotTickCollection ImPlotTickCollection;
typedef struct ImPlotAnnotationCollection ImPlotAnnotationCollection;
typedef struct ImPlotAnnotation ImPlotAnnotation;
typedef struct ImPlotPointError ImPlotPointError;
typedef struct ImPlotColormapMod ImPlotColormapMod;
typedef struct ImPlotTime ImPlotTime;
typedef struct ImPlotDateTimeFmt ImPlotDateTimeFmt;
typedef struct ImBufferWriter ImBufferWriter;
typedef struct ImPlotNextPlotData ImPlotNextPlotData;
typedef struct ImPlotPlot ImPlotPlot;
typedef struct ImPlotLegendData ImPlotLegendData;
typedef struct ImPlotItem ImPlotItem;
typedef struct ImPlotAxisColor ImPlotAxisColor;
typedef struct ImPlotAxisState ImPlotAxisState;
typedef struct ImPlotAxis ImPlotAxis;
typedef struct ImPlotTick ImPlotTick;
typedef struct ImPlotInputMap ImPlotInputMap;
typedef struct ImPlotStyle ImPlotStyle;
typedef struct ImPlotLimits ImPlotLimits;
typedef struct ImPlotRange ImPlotRange;
typedef struct ImPlotPoint ImPlotPoint;
typedef struct ImPlotContext ImPlotContext;

struct ImPlotContext;
typedef int ImPlotFlags;
typedef int ImPlotAxisFlags;
typedef int ImPlotCol;
typedef int ImPlotStyleVar;
typedef int ImPlotMarker;
typedef int ImPlotColormap;
typedef int ImPlotLocation;
typedef int ImPlotOrientation;
typedef int ImPlotYAxis;
struct ImPlotTick;
struct ImPlotAxis;
struct ImPlotAxisState;
struct ImPlotAxisColor;
struct ImPlotItem;
struct ImPlotLegendData;
struct ImPlotPlot;
struct ImPlotNextPlotData;
extern ImPlotContext* GImPlot;
typedef int ImPlotScale;
typedef int ImPlotTimeUnit;
typedef int ImPlotDateFmt;
typedef int ImPlotTimeFmt;typedef struct ImVector_ImPlotItem {int Size;int Capacity;ImPlotItem* Data;} ImVector_ImPlotItem;
typedef struct ImPool_ImPlotItem {ImVector_ImPlotItem Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;} ImPool_ImPlotItem;
typedef struct ImVector_ImPlotPlot {int Size;int Capacity;ImPlotPlot* Data;} ImVector_ImPlotPlot;
typedef struct ImPool_ImPlotPlot {ImVector_ImPlotPlot Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;} ImPool_ImPlotPlot;
typedef struct ImVector_ImGuiColorMod {int Size;int Capacity;ImGuiColorMod* Data;} ImVector_ImGuiColorMod;
typedef struct ImVector_ImGuiStyleMod {int Size;int Capacity;ImGuiStyleMod* Data;} ImVector_ImGuiStyleMod;
typedef struct ImVector_ImPlotAnnotation {int Size;int Capacity;ImPlotAnnotation* Data;} ImVector_ImPlotAnnotation;
typedef struct ImVector_ImPlotColormapMod {int Size;int Capacity;ImPlotColormapMod* Data;} ImVector_ImPlotColormapMod;
typedef struct ImVector_ImPlotTick {int Size;int Capacity;ImPlotTick* Data;} ImVector_ImPlotTick;
typedef struct ImVector_ImS16 {int Size;int Capacity;ImS16* Data;} ImVector_ImS16;
typedef struct ImVector_ImS32 {int Size;int Capacity;ImS32* Data;} ImVector_ImS32;
typedef struct ImVector_ImS64 {int Size;int Capacity;ImS64* Data;} ImVector_ImS64;
typedef struct ImVector_ImS8 {int Size;int Capacity;ImS8* Data;} ImVector_ImS8;
typedef struct ImVector_ImU16 {int Size;int Capacity;ImU16* Data;} ImVector_ImU16;
typedef struct ImVector_ImU32 {int Size;int Capacity;ImU32* Data;} ImVector_ImU32;
typedef struct ImVector_ImU64 {int Size;int Capacity;ImU64* Data;} ImVector_ImU64;
typedef struct ImVector_ImU8 {int Size;int Capacity;ImU8* Data;} ImVector_ImU8;
typedef struct ImVector_double {int Size;int Capacity;double* Data;} ImVector_double;
typedef struct ImVector_int {int Size;int Capacity;int* Data;} ImVector_int;

typedef enum {
    ImPlotFlags_None = 0,
    ImPlotFlags_NoTitle = 1 << 0,
    ImPlotFlags_NoLegend = 1 << 1,
    ImPlotFlags_NoMenus = 1 << 2,
    ImPlotFlags_NoBoxSelect = 1 << 3,
    ImPlotFlags_NoMousePos = 1 << 4,
    ImPlotFlags_NoHighlight = 1 << 5,
    ImPlotFlags_NoChild = 1 << 6,
    ImPlotFlags_Equal = 1 << 7,
    ImPlotFlags_YAxis2 = 1 << 8,
    ImPlotFlags_YAxis3 = 1 << 9,
    ImPlotFlags_Query = 1 << 10,
    ImPlotFlags_Crosshairs = 1 << 11,
    ImPlotFlags_AntiAliased = 1 << 12,
    ImPlotFlags_CanvasOnly = ImPlotFlags_NoTitle | ImPlotFlags_NoLegend | ImPlotFlags_NoMenus | ImPlotFlags_NoBoxSelect | ImPlotFlags_NoMousePos
}ImPlotFlags_;
typedef enum {
    ImPlotAxisFlags_None = 0,
    ImPlotAxisFlags_NoGridLines = 1 << 0,
    ImPlotAxisFlags_NoTickMarks = 1 << 1,
    ImPlotAxisFlags_NoTickLabels = 1 << 2,
    ImPlotAxisFlags_LogScale = 1 << 3,
    ImPlotAxisFlags_Time = 1 << 4,
    ImPlotAxisFlags_Invert = 1 << 5,
    ImPlotAxisFlags_LockMin = 1 << 6,
    ImPlotAxisFlags_LockMax = 1 << 7,
    ImPlotAxisFlags_Lock = ImPlotAxisFlags_LockMin | ImPlotAxisFlags_LockMax,
    ImPlotAxisFlags_NoDecorations = ImPlotAxisFlags_NoGridLines | ImPlotAxisFlags_NoTickMarks | ImPlotAxisFlags_NoTickLabels
}ImPlotAxisFlags_;
typedef enum {
    ImPlotCol_Line,
    ImPlotCol_Fill,
    ImPlotCol_MarkerOutline,
    ImPlotCol_MarkerFill,
    ImPlotCol_ErrorBar,
    ImPlotCol_FrameBg,
    ImPlotCol_PlotBg,
    ImPlotCol_PlotBorder,
    ImPlotCol_LegendBg,
    ImPlotCol_LegendBorder,
    ImPlotCol_LegendText,
    ImPlotCol_TitleText,
    ImPlotCol_InlayText,
    ImPlotCol_XAxis,
    ImPlotCol_XAxisGrid,
    ImPlotCol_YAxis,
    ImPlotCol_YAxisGrid,
    ImPlotCol_YAxis2,
    ImPlotCol_YAxisGrid2,
    ImPlotCol_YAxis3,
    ImPlotCol_YAxisGrid3,
    ImPlotCol_Selection,
    ImPlotCol_Query,
    ImPlotCol_Crosshairs,
    ImPlotCol_COUNT
}ImPlotCol_;
typedef enum {
    ImPlotStyleVar_LineWeight,
    ImPlotStyleVar_Marker,
    ImPlotStyleVar_MarkerSize,
    ImPlotStyleVar_MarkerWeight,
    ImPlotStyleVar_FillAlpha,
    ImPlotStyleVar_ErrorBarSize,
    ImPlotStyleVar_ErrorBarWeight,
    ImPlotStyleVar_DigitalBitHeight,
    ImPlotStyleVar_DigitalBitGap,
    ImPlotStyleVar_PlotBorderSize,
    ImPlotStyleVar_MinorAlpha,
    ImPlotStyleVar_MajorTickLen,
    ImPlotStyleVar_MinorTickLen,
    ImPlotStyleVar_MajorTickSize,
    ImPlotStyleVar_MinorTickSize,
    ImPlotStyleVar_MajorGridSize,
    ImPlotStyleVar_MinorGridSize,
    ImPlotStyleVar_PlotPadding,
    ImPlotStyleVar_LabelPadding,
    ImPlotStyleVar_LegendPadding,
    ImPlotStyleVar_LegendInnerPadding,
    ImPlotStyleVar_LegendSpacing,
    ImPlotStyleVar_MousePosPadding,
    ImPlotStyleVar_AnnotationPadding,
    ImPlotStyleVar_FitPadding,
    ImPlotStyleVar_PlotDefaultSize,
    ImPlotStyleVar_PlotMinSize,
    ImPlotStyleVar_COUNT
}ImPlotStyleVar_;
typedef enum {
    ImPlotMarker_None = -1,
    ImPlotMarker_Circle,
    ImPlotMarker_Square,
    ImPlotMarker_Diamond,
    ImPlotMarker_Up,
    ImPlotMarker_Down,
    ImPlotMarker_Left,
    ImPlotMarker_Right,
    ImPlotMarker_Cross,
    ImPlotMarker_Plus,
    ImPlotMarker_Asterisk,
    ImPlotMarker_COUNT
}ImPlotMarker_;
typedef enum {
    ImPlotColormap_Default = 0,
    ImPlotColormap_Deep = 1,
    ImPlotColormap_Dark = 2,
    ImPlotColormap_Pastel = 3,
    ImPlotColormap_Paired = 4,
    ImPlotColormap_Viridis = 5,
    ImPlotColormap_Plasma = 6,
    ImPlotColormap_Hot = 7,
    ImPlotColormap_Cool = 8,
    ImPlotColormap_Pink = 9,
    ImPlotColormap_Jet = 10,
    ImPlotColormap_COUNT
}ImPlotColormap_;
typedef enum {
    ImPlotLocation_Center = 0,
    ImPlotLocation_North = 1 << 0,
    ImPlotLocation_South = 1 << 1,
    ImPlotLocation_West = 1 << 2,
    ImPlotLocation_East = 1 << 3,
    ImPlotLocation_NorthWest = ImPlotLocation_North | ImPlotLocation_West,
    ImPlotLocation_NorthEast = ImPlotLocation_North | ImPlotLocation_East,
    ImPlotLocation_SouthWest = ImPlotLocation_South | ImPlotLocation_West,
    ImPlotLocation_SouthEast = ImPlotLocation_South | ImPlotLocation_East
}ImPlotLocation_;
typedef enum {
    ImPlotOrientation_Horizontal,
    ImPlotOrientation_Vertical
}ImPlotOrientation_;
typedef enum {
    ImPlotYAxis_1 = 0,
    ImPlotYAxis_2 = 1,
    ImPlotYAxis_3 = 2
}ImPlotYAxis_;
struct ImPlotPoint
{
    double x, y;
};
struct ImPlotRange
{
    double Min, Max;
};
struct ImPlotLimits
{
    ImPlotRange X, Y;
};
struct ImPlotStyle
{
    float LineWeight;
    int Marker;
    float MarkerSize;
    float MarkerWeight;
    float FillAlpha;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    float PlotBorderSize;
    float MinorAlpha;
    ImVec2 MajorTickLen;
    ImVec2 MinorTickLen;
    ImVec2 MajorTickSize;
    ImVec2 MinorTickSize;
    ImVec2 MajorGridSize;
    ImVec2 MinorGridSize;
    ImVec2 PlotPadding;
    ImVec2 LabelPadding;
    ImVec2 LegendPadding;
    ImVec2 LegendInnerPadding;
    ImVec2 LegendSpacing;
    ImVec2 MousePosPadding;
    ImVec2 AnnotationPadding;
    ImVec2 FitPadding;
    ImVec2 PlotDefaultSize;
    ImVec2 PlotMinSize;
    ImVec4 Colors[ImPlotCol_COUNT];
    bool AntiAliasedLines;
    bool UseLocalTime;
    bool UseISO8601;
    bool Use24HourClock;
};
struct ImPlotInputMap
{
    ImGuiMouseButton PanButton;
    ImGuiKeyModFlags PanMod;
    ImGuiMouseButton FitButton;
    ImGuiMouseButton ContextMenuButton;
    ImGuiMouseButton BoxSelectButton;
    ImGuiKeyModFlags BoxSelectMod;
    ImGuiMouseButton BoxSelectCancelButton;
    ImGuiMouseButton QueryButton;
    ImGuiKeyModFlags QueryMod;
    ImGuiKeyModFlags QueryToggleMod;
    ImGuiKeyModFlags HorizontalMod;
    ImGuiKeyModFlags VerticalMod;
};
struct ImBufferWriter
{
    char* Buffer;
    int Size;
    int Pos;
};
typedef enum {
    ImPlotScale_LinLin,
    ImPlotScale_LogLin,
    ImPlotScale_LinLog,
    ImPlotScale_LogLog
}ImPlotScale_;
typedef enum {
    ImPlotTimeUnit_Us,
    ImPlotTimeUnit_Ms,
    ImPlotTimeUnit_S,
    ImPlotTimeUnit_Min,
    ImPlotTimeUnit_Hr,
    ImPlotTimeUnit_Day,
    ImPlotTimeUnit_Mo,
    ImPlotTimeUnit_Yr,
    ImPlotTimeUnit_COUNT
}ImPlotTimeUnit_;
typedef enum {
    ImPlotDateFmt_None = 0,
    ImPlotDateFmt_DayMo,
    ImPlotDateFmt_DayMoYr,
    ImPlotDateFmt_MoYr,
    ImPlotDateFmt_Mo,
    ImPlotDateFmt_Yr
}ImPlotDateFmt_;
typedef enum {
    ImPlotTimeFmt_None = 0,
    ImPlotTimeFmt_Us,
    ImPlotTimeFmt_SUs,
    ImPlotTimeFmt_SMs,
    ImPlotTimeFmt_S,
    ImPlotTimeFmt_HrMinSMs,
    ImPlotTimeFmt_HrMinS,
    ImPlotTimeFmt_HrMin,
    ImPlotTimeFmt_Hr
}ImPlotTimeFmt_;
struct ImPlotDateTimeFmt
{
    ImPlotDateFmt Date;
    ImPlotTimeFmt Time;
    bool UseISO8601;
    bool Use24HourClock;
};
struct ImPlotTime
{
    time_t S;
    int Us;
};
struct ImPlotColormapMod
{
    const ImVec4* Colormap;
    int ColormapSize;
};
struct ImPlotPointError
{
    double X, Y, Neg, Pos;
};
struct ImPlotAnnotation
{
    ImVec2 Pos;
    ImVec2 Offset;
    ImU32 ColorBg;
    ImU32 ColorFg;
    int TextOffset;
    bool Clamp;
};
struct ImPlotAnnotationCollection
{
    ImVector_ImPlotAnnotation Annotations;
    ImGuiTextBuffer TextBuffer;
    int Size;
};
struct ImPlotTick
{
    double PlotPos;
    float PixelPos;
    ImVec2 LabelSize;
    int TextOffset;
    bool Major;
    bool ShowLabel;
    int Level;
};
struct ImPlotTickCollection
{
    ImVector_ImPlotTick Ticks;
    ImGuiTextBuffer TextBuffer;
    float TotalWidth;
    float TotalHeight;
    float MaxWidth;
    float MaxHeight;
    int Size;
};
struct ImPlotAxis
{
    ImPlotAxisFlags Flags;
    ImPlotAxisFlags PreviousFlags;
    ImPlotRange Range;
    float Pixels;
    ImPlotOrientation Orientation;
    bool Dragging;
    bool ExtHovered;
    bool AllHovered;
    bool Present;
    bool HasRange;
    double* LinkedMin;
    double* LinkedMax;
    ImPlotTime PickerTimeMin, PickerTimeMax;
    int PickerLevel;
    ImU32 ColorMaj, ColorMin, ColorTxt;
    ImGuiCond RangeCond;
    ImRect HoverRect;
};
struct ImPlotItem
{
    ImGuiID ID;
    ImVec4 Color;
    int NameOffset;
    bool Show;
    bool LegendHovered;
    bool SeenThisFrame;
};
struct ImPlotLegendData
{
    ImVector_int Indices;
    ImGuiTextBuffer Labels;
};
struct ImPlotPlot
{
    ImGuiID ID;
    ImPlotFlags Flags;
    ImPlotFlags PreviousFlags;
    ImPlotAxis XAxis;
    ImPlotAxis YAxis[3];
    ImPlotLegendData LegendData;
    ImPool_ImPlotItem Items;
    ImVec2 SelectStart;
    ImVec2 QueryStart;
    ImRect QueryRect;
    bool Selecting;
    bool Querying;
    bool Queried;
    bool DraggingQuery;
    bool LegendHovered;
    bool LegendOutside;
    bool LegendFlipSideNextFrame;
    bool FrameHovered;
    bool PlotHovered;
    int ColormapIdx;
    int CurrentYAxis;
    ImPlotLocation MousePosLocation;
    ImPlotLocation LegendLocation;
    ImPlotOrientation LegendOrientation;
    ImRect FrameRect;
    ImRect CanvasRect;
    ImRect PlotRect;
    ImRect AxesRect;
};
struct ImPlotNextPlotData
{
    ImGuiCond XRangeCond;
    ImGuiCond YRangeCond[3];
    ImPlotRange X;
    ImPlotRange Y[3];
    bool HasXRange;
    bool HasYRange[3];
    bool ShowDefaultTicksX;
    bool ShowDefaultTicksY[3];
    bool FitX;
    bool FitY[3];
    double* LinkedXmin;
    double* LinkedXmax;
    double* LinkedYmin[3];
    double* LinkedYmax[3];
};
struct ImPlotNextItemData
{
    ImVec4 Colors[5];
    float LineWeight;
    ImPlotMarker Marker;
    float MarkerSize;
    float MarkerWeight;
    float FillAlpha;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    bool RenderLine;
    bool RenderFill;
    bool RenderMarkerLine;
    bool RenderMarkerFill;
    bool HasHidden;
    bool Hidden;
    ImGuiCond HiddenCond;
};
struct ImPlotContext
{
    ImPool_ImPlotPlot Plots;
    ImPlotPlot* CurrentPlot;
    ImPlotItem* CurrentItem;
    ImPlotItem* PreviousItem;
    ImPlotTickCollection XTicks;
    ImPlotTickCollection YTicks[3];
    float YAxisReference[3];
    ImPlotAnnotationCollection Annotations;
    ImPlotScale Scales[3];
    ImRect PixelRange[3];
    double Mx;
    double My[3];
    double LogDenX;
    double LogDenY[3];
    ImPlotRange ExtentsX;
    ImPlotRange ExtentsY[3];
    bool FitThisFrame;
    bool FitX;
    bool FitY[3];
    bool RenderX;
    bool RenderY[3];
    bool ChildWindowMade;
    ImPlotStyle Style;
    ImVector_ImGuiColorMod ColorModifiers;
    ImVector_ImGuiStyleMod StyleModifiers;
    const ImVec4* Colormap;
    int ColormapSize;
    ImVector_ImPlotColormapMod ColormapModifiers;
    tm Tm;
    int VisibleItemCount;
    int DigitalPlotItemCnt;
    int DigitalPlotOffset;
    ImPlotNextPlotData NextPlotData;
    ImPlotNextItemData NextItemData;
    ImPlotInputMap InputMap;
    ImPlotPoint MousePos[3];
};
#else

#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef ImPool<ImPlotItem> ImPool_ImPlotItem;
typedef ImPool<ImPlotPlot> ImPool_ImPlotPlot;
typedef ImVector<ImGuiColorMod> ImVector_ImGuiColorMod;
typedef ImVector<ImGuiStyleMod> ImVector_ImGuiStyleMod;
typedef ImVector<ImPlotAnnotation> ImVector_ImPlotAnnotation;
typedef ImVector<ImPlotColormapMod> ImVector_ImPlotColormapMod;
typedef ImVector<ImPlotTick> ImVector_ImPlotTick;
typedef ImVector<ImS16> ImVector_ImS16;
typedef ImVector<ImS32> ImVector_ImS32;
typedef ImVector<ImS64> ImVector_ImS64;
typedef ImVector<ImS8> ImVector_ImS8;
typedef ImVector<ImU16> ImVector_ImU16;
typedef ImVector<ImU32> ImVector_ImU32;
typedef ImVector<ImU64> ImVector_ImU64;
typedef ImVector<ImU8> ImVector_ImU8;
typedef ImVector<double> ImVector_double;
typedef ImVector<float> ImVector_float;
typedef ImVector<int> ImVector_int;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointNil(void);
CIMGUI_API void ImPlotPoint_destroy(ImPlotPoint* self);
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointdouble(double _x,double _y);
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointVec2(const ImVec2 p);
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangeNil(void);
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self);
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangedouble(double _min,double _max);
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,double value);
CIMGUI_API double ImPlotRange_Size(ImPlotRange* self);
CIMGUI_API bool ImPlotLimits_ContainsPlotPoInt(ImPlotLimits* self,const ImPlotPoint p);
CIMGUI_API bool ImPlotLimits_Containsdouble(ImPlotLimits* self,double x,double y);
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void);
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self);
CIMGUI_API ImPlotInputMap* ImPlotInputMap_ImPlotInputMap(void);
CIMGUI_API void ImPlotInputMap_destroy(ImPlotInputMap* self);
CIMGUI_API ImPlotContext* ImPlot_CreateContext(void);
CIMGUI_API void ImPlot_DestroyContext(ImPlotContext* ctx);
CIMGUI_API ImPlotContext* ImPlot_GetCurrentContext(void);
CIMGUI_API void ImPlot_SetCurrentContext(ImPlotContext* ctx);
CIMGUI_API bool ImPlot_BeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags);
CIMGUI_API void ImPlot_EndPlot(void);
CIMGUI_API void ImPlot_PlotLineFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLinedoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLinedoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotLineU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotScatterU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void ImPlot_PlotShadedFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadeddoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsFloatPtrInt(const char* label_id,const float* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsdoublePtrInt(const char* label_id,const double* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS8PtrInt(const char* label_id,const ImS8* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU8PtrInt(const char* label_id,const ImU8* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS16PtrInt(const char* label_id,const ImS16* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU16PtrInt(const char* label_id,const ImU16* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS32PtrInt(const char* label_id,const ImS32* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU32PtrInt(const char* label_id,const ImU32* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS64PtrInt(const char* label_id,const ImS64* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU64PtrInt(const char* label_id,const ImU64* values,int count,double width,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double width,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHFloatPtrInt(const char* label_id,const float* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHdoublePtrInt(const char* label_id,const double* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS8PtrInt(const char* label_id,const ImS8* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU8PtrInt(const char* label_id,const ImU8* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS16PtrInt(const char* label_id,const ImS16* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU16PtrInt(const char* label_id,const ImU16* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS32PtrInt(const char* label_id,const ImS32* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU32PtrInt(const char* label_id,const ImU32* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS64PtrInt(const char* label_id,const ImS64* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU64PtrInt(const char* label_id,const ImU64* values,int count,double height,double shift,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotBarsHU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double height,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsdoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotStemsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride);
CIMGUI_API void ImPlot_PlotPieChartFloatPtr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartdoublePtr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartS8Ptr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartU8Ptr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartS16Ptr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartU16Ptr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartS32Ptr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartU32Ptr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartS64Ptr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotPieChartU64Ptr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0);
CIMGUI_API void ImPlot_PlotHeatmapFloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapdoublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapS8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapU8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapS16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapU16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapS32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapU32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapS64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotHeatmapU64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max);
CIMGUI_API void ImPlot_PlotDigitalFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitaldoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotDigitalU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col);
CIMGUI_API void ImPlot_PlotText(const char* text,double x,double y,bool vertical,const ImVec2 pix_offset);
CIMGUI_API void ImPlot_PlotDummy(const char* label_id);
CIMGUI_API void ImPlot_SetNextPlotLimits(double xmin,double xmax,double ymin,double ymax,ImGuiCond cond);
CIMGUI_API void ImPlot_SetNextPlotLimitsX(double xmin,double xmax,ImGuiCond cond);
CIMGUI_API void ImPlot_SetNextPlotLimitsY(double ymin,double ymax,ImGuiCond cond,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_LinkNextPlotLimits(double* xmin,double* xmax,double* ymin,double* ymax,double* ymin2,double* ymax2,double* ymin3,double* ymax3);
CIMGUI_API void ImPlot_FitNextPlotAxes(bool x,bool y,bool y2,bool y3);
CIMGUI_API void ImPlot_SetNextPlotTicksXdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default);
CIMGUI_API void ImPlot_SetNextPlotTicksXdouble(double x_min,double x_max,int n_ticks,const char* const labels[],bool show_default);
CIMGUI_API void ImPlot_SetNextPlotTicksYdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_SetNextPlotTicksYdouble(double y_min,double y_max,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_SetPlotYAxis(ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_HideNextItem(bool hidden,ImGuiCond cond);
CIMGUI_API void ImPlot_PixelsToPlotVec2(ImPlotPoint *pOut,const ImVec2 pix,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_PixelsToPlotFloat(ImPlotPoint *pOut,float x,float y,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_PlotToPixelsPlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_PlotToPixelsdouble(ImVec2 *pOut,double x,double y,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_GetPlotPos(ImVec2 *pOut);
CIMGUI_API void ImPlot_GetPlotSize(ImVec2 *pOut);
CIMGUI_API bool ImPlot_IsPlotHovered(void);
CIMGUI_API bool ImPlot_IsPlotXAxisHovered(void);
CIMGUI_API bool ImPlot_IsPlotYAxisHovered(ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_GetPlotLimits(ImPlotLimits *pOut,ImPlotYAxis y_axis);
CIMGUI_API bool ImPlot_IsPlotQueried(void);
CIMGUI_API void ImPlot_GetPlotQuery(ImPlotLimits *pOut,ImPlotYAxis y_axis);
CIMGUI_API void ImPlot_AnnotateStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...);
CIMGUI_API void ImPlot_AnnotateVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...);
CIMGUI_API void ImPlot_AnnotateVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args);
CIMGUI_API void ImPlot_AnnotateVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args);
CIMGUI_API void ImPlot_AnnotateClampedStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...);
CIMGUI_API void ImPlot_AnnotateClampedVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...);
CIMGUI_API void ImPlot_AnnotateClampedVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args);
CIMGUI_API void ImPlot_AnnotateClampedVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args);
CIMGUI_API bool ImPlot_DragLineX(const char* id,double* x_value,bool show_label,const ImVec4 col,float thickness);
CIMGUI_API bool ImPlot_DragLineY(const char* id,double* y_value,bool show_label,const ImVec4 col,float thickness);
CIMGUI_API bool ImPlot_DragPoint(const char* id,double* x,double* y,bool show_label,const ImVec4 col,float radius);
CIMGUI_API void ImPlot_SetLegendLocation(ImPlotLocation location,ImPlotOrientation orientation,bool outside);
CIMGUI_API void ImPlot_SetMousePosLocation(ImPlotLocation location);
CIMGUI_API bool ImPlot_IsLegendEntryHovered(const char* label_id);
CIMGUI_API bool ImPlot_BeginLegendDragDropSource(const char* label_id,ImGuiDragDropFlags flags);
CIMGUI_API void ImPlot_EndLegendDragDropSource(void);
CIMGUI_API bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button);
CIMGUI_API void ImPlot_EndLegendPopup(void);
CIMGUI_API ImPlotStyle* ImPlot_GetStyle(void);
CIMGUI_API void ImPlot_StyleColorsAuto(ImPlotStyle* dst);
CIMGUI_API void ImPlot_StyleColorsClassic(ImPlotStyle* dst);
CIMGUI_API void ImPlot_StyleColorsDark(ImPlotStyle* dst);
CIMGUI_API void ImPlot_StyleColorsLight(ImPlotStyle* dst);
CIMGUI_API void ImPlot_PushStyleColorU32(ImPlotCol idx,ImU32 col);
CIMGUI_API void ImPlot_PushStyleColorVec4(ImPlotCol idx,const ImVec4 col);
CIMGUI_API void ImPlot_PopStyleColor(int count);
CIMGUI_API void ImPlot_PushStyleVarFloat(ImPlotStyleVar idx,float val);
CIMGUI_API void ImPlot_PushStyleVarInt(ImPlotStyleVar idx,int val);
CIMGUI_API void ImPlot_PushStyleVarVec2(ImPlotStyleVar idx,const ImVec2 val);
CIMGUI_API void ImPlot_PopStyleVar(int count);
CIMGUI_API void ImPlot_SetNextLineStyle(const ImVec4 col,float weight);
CIMGUI_API void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod);
CIMGUI_API void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline);
CIMGUI_API void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight);
CIMGUI_API void ImPlot_GetLastItemColor(ImVec4 *pOut);
CIMGUI_API const char* ImPlot_GetStyleColorName(ImPlotCol idx);
CIMGUI_API const char* ImPlot_GetMarkerName(ImPlotMarker idx);
CIMGUI_API void ImPlot_PushColormapPlotColormap(ImPlotColormap colormap);
CIMGUI_API void ImPlot_PushColormapVec4Ptr(const ImVec4* colormap,int size);
CIMGUI_API void ImPlot_PopColormap(int count);
CIMGUI_API void ImPlot_SetColormapVec4Ptr(const ImVec4* colormap,int size);
CIMGUI_API void ImPlot_SetColormapPlotColormap(ImPlotColormap colormap,int samples);
CIMGUI_API int ImPlot_GetColormapSize(void);
CIMGUI_API void ImPlot_GetColormapColor(ImVec4 *pOut,int index);
CIMGUI_API void ImPlot_LerpColormapFloat(ImVec4 *pOut,float t);
CIMGUI_API void ImPlot_NextColormapColor(ImVec4 *pOut);
CIMGUI_API void ImPlot_ShowColormapScale(double scale_min,double scale_max,float height);
CIMGUI_API const char* ImPlot_GetColormapName(ImPlotColormap colormap);
CIMGUI_API ImPlotInputMap* ImPlot_GetInputMap(void);
CIMGUI_API ImDrawList* ImPlot_GetPlotDrawList(void);
CIMGUI_API void ImPlot_PushPlotClipRect(void);
CIMGUI_API void ImPlot_PopPlotClipRect(void);
CIMGUI_API bool ImPlot_ShowStyleSelector(const char* label);
CIMGUI_API bool ImPlot_ShowColormapSelector(const char* label);
CIMGUI_API void ImPlot_ShowStyleEditor(ImPlotStyle* ref);
CIMGUI_API void ImPlot_ShowUserGuide(void);
CIMGUI_API void ImPlot_ShowMetricsWindow(bool* p_popen);
CIMGUI_API void ImPlot_SetImGuiContext(ImGuiContext* ctx);
CIMGUI_API void ImPlot_ShowDemoWindow(bool* p_open);
CIMGUI_API float ImPlot_ImLog10Float(float x);
CIMGUI_API double ImPlot_ImLog10double(double x);
CIMGUI_API float ImPlot_ImRemapFloat(float x,float x0,float x1,float y0,float y1);
CIMGUI_API double ImPlot_ImRemapdouble(double x,double x0,double x1,double y0,double y1);
CIMGUI_API ImS8 ImPlot_ImRemapS8(ImS8 x,ImS8 x0,ImS8 x1,ImS8 y0,ImS8 y1);
CIMGUI_API ImU8 ImPlot_ImRemapU8(ImU8 x,ImU8 x0,ImU8 x1,ImU8 y0,ImU8 y1);
CIMGUI_API ImS16 ImPlot_ImRemapS16(ImS16 x,ImS16 x0,ImS16 x1,ImS16 y0,ImS16 y1);
CIMGUI_API ImU16 ImPlot_ImRemapU16(ImU16 x,ImU16 x0,ImU16 x1,ImU16 y0,ImU16 y1);
CIMGUI_API ImS32 ImPlot_ImRemapS32(ImS32 x,ImS32 x0,ImS32 x1,ImS32 y0,ImS32 y1);
CIMGUI_API ImU32 ImPlot_ImRemapU32(ImU32 x,ImU32 x0,ImU32 x1,ImU32 y0,ImU32 y1);
CIMGUI_API ImS64 ImPlot_ImRemapS64(ImS64 x,ImS64 x0,ImS64 x1,ImS64 y0,ImS64 y1);
CIMGUI_API ImU64 ImPlot_ImRemapU64(ImU64 x,ImU64 x0,ImU64 x1,ImU64 y0,ImU64 y1);
CIMGUI_API int ImPlot_ImPosMod(int l,int r);
CIMGUI_API bool ImPlot_ImNanOrInf(double val);
CIMGUI_API double ImPlot_ImConstrainNan(double val);
CIMGUI_API double ImPlot_ImConstrainInf(double val);
CIMGUI_API double ImPlot_ImConstrainLog(double val);
CIMGUI_API double ImPlot_ImConstrainTime(double val);
CIMGUI_API bool ImPlot_ImAlmostEqual(double v1,double v2,int ulp);
CIMGUI_API ImBufferWriter* ImBufferWriter_ImBufferWriter(char* buffer,int size);
CIMGUI_API void ImBufferWriter_destroy(ImBufferWriter* self);
CIMGUI_API void ImBufferWriter_Write(ImBufferWriter* self,const char* fmt,...);
CIMGUI_API void ImBufferWriter_WriteV(ImBufferWriter* self,const char* fmt,va_list args);
CIMGUI_API ImPlotDateTimeFmt* ImPlotDateTimeFmt_ImPlotDateTimeFmt(ImPlotDateFmt date_fmt,ImPlotTimeFmt time_fmt,bool use_24_hr_clk,bool use_iso_8601);
CIMGUI_API void ImPlotDateTimeFmt_destroy(ImPlotDateTimeFmt* self);
CIMGUI_API ImPlotTime* ImPlotTime_ImPlotTimeNil(void);
CIMGUI_API void ImPlotTime_destroy(ImPlotTime* self);
CIMGUI_API ImPlotTime* ImPlotTime_ImPlotTimetime_t(time_t s,int us);
CIMGUI_API void ImPlotTime_RollOver(ImPlotTime* self);
CIMGUI_API double ImPlotTime_ToDouble(ImPlotTime* self);
CIMGUI_API ImPlotTime ImPlotTime_FromDouble(double t);
CIMGUI_API ImPlotColormapMod* ImPlotColormapMod_ImPlotColormapMod(const ImVec4* colormap,int colormap_size);
CIMGUI_API void ImPlotColormapMod_destroy(ImPlotColormapMod* self);
CIMGUI_API ImPlotPointError* ImPlotPointError_ImPlotPointError(double x,double y,double neg,double pos);
CIMGUI_API void ImPlotPointError_destroy(ImPlotPointError* self);
CIMGUI_API ImPlotAnnotationCollection* ImPlotAnnotationCollection_ImPlotAnnotationCollection(void);
CIMGUI_API void ImPlotAnnotationCollection_destroy(ImPlotAnnotationCollection* self);
CIMGUI_API void ImPlotAnnotationCollection_AppendV(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,va_list args);
CIMGUI_API void ImPlotAnnotationCollection_Append(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,...);
CIMGUI_API const char* ImPlotAnnotationCollection_GetText(ImPlotAnnotationCollection* self,int idx);
CIMGUI_API void ImPlotAnnotationCollection_Reset(ImPlotAnnotationCollection* self);
CIMGUI_API ImPlotTick* ImPlotTick_ImPlotTick(double value,bool major,bool show_label);
CIMGUI_API void ImPlotTick_destroy(ImPlotTick* self);
CIMGUI_API ImPlotTickCollection* ImPlotTickCollection_ImPlotTickCollection(void);
CIMGUI_API void ImPlotTickCollection_destroy(ImPlotTickCollection* self);
CIMGUI_API void ImPlotTickCollection_AppendPlotTick(ImPlotTickCollection* self,const ImPlotTick tick);
CIMGUI_API void ImPlotTickCollection_Appenddouble(ImPlotTickCollection* self,double value,bool major,bool show_label,void(*labeler)(ImPlotTick& tick,ImGuiTextBuffer& buf));
CIMGUI_API const char* ImPlotTickCollection_GetText(ImPlotTickCollection* self,int idx);
CIMGUI_API void ImPlotTickCollection_Reset(ImPlotTickCollection* self);
CIMGUI_API ImPlotAxis* ImPlotAxis_ImPlotAxis(void);
CIMGUI_API void ImPlotAxis_destroy(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_SetMin(ImPlotAxis* self,double _min);
CIMGUI_API bool ImPlotAxis_SetMax(ImPlotAxis* self,double _max);
CIMGUI_API void ImPlotAxis_SetRangedouble(ImPlotAxis* self,double _min,double _max);
CIMGUI_API void ImPlotAxis_SetRangePlotRange(ImPlotAxis* self,const ImPlotRange range);
CIMGUI_API void ImPlotAxis_SetAspect(ImPlotAxis* self,double unit_per_pix);
CIMGUI_API double ImPlotAxis_GetAspect(ImPlotAxis* self);
CIMGUI_API void ImPlotAxis_Constrain(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsLabeled(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsInverted(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsAlwaysLocked(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsLockedMin(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsLockedMax(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsLocked(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsTime(ImPlotAxis* self);
CIMGUI_API bool ImPlotAxis_IsLog(ImPlotAxis* self);
CIMGUI_API ImPlotItem* ImPlotItem_ImPlotItem(void);
CIMGUI_API void ImPlotItem_destroy(ImPlotItem* self);
CIMGUI_API void ImPlotLegendData_Reset(ImPlotLegendData* self);
CIMGUI_API ImPlotPlot* ImPlotPlot_ImPlotPlot(void);
CIMGUI_API void ImPlotPlot_destroy(ImPlotPlot* self);
CIMGUI_API int ImPlotPlot_GetLegendCount(ImPlotPlot* self);
CIMGUI_API ImPlotItem* ImPlotPlot_GetLegendItem(ImPlotPlot* self,int i);
CIMGUI_API const char* ImPlotPlot_GetLegendLabel(ImPlotPlot* self,int i);
CIMGUI_API bool ImPlotPlot_IsLocked(ImPlotPlot* self);
CIMGUI_API ImPlotNextPlotData* ImPlotNextPlotData_ImPlotNextPlotData(void);
CIMGUI_API void ImPlotNextPlotData_destroy(ImPlotNextPlotData* self);
CIMGUI_API void ImPlotNextPlotData_Reset(ImPlotNextPlotData* self);
CIMGUI_API ImPlotNextItemData* ImPlotNextItemData_ImPlotNextItemData(void);
CIMGUI_API void ImPlotNextItemData_destroy(ImPlotNextItemData* self);
CIMGUI_API void ImPlotNextItemData_Reset(ImPlotNextItemData* self);
CIMGUI_API void ImPlot_Initialize(ImPlotContext* ctx);
CIMGUI_API void ImPlot_Reset(ImPlotContext* ctx);
CIMGUI_API ImPlotPlot* ImPlot_GetPlot(const char* title);
CIMGUI_API ImPlotPlot* ImPlot_GetCurrentPlot(void);
CIMGUI_API void ImPlot_BustPlotCache(void);
CIMGUI_API void ImPlot_ShowPlotContextMenu(ImPlotPlot* plot);
CIMGUI_API bool ImPlot_BeginItem(const char* label_id,ImPlotCol recolor_from);
CIMGUI_API void ImPlot_EndItem(void);
CIMGUI_API ImPlotItem* ImPlot_RegisterOrGetItem(const char* label_id,bool* just_created);
CIMGUI_API ImPlotItem* ImPlot_GetItem(const char* label_id);
CIMGUI_API ImPlotItem* ImPlot_GetCurrentItem(void);
CIMGUI_API void ImPlot_BustItemCache(void);
CIMGUI_API int ImPlot_GetCurrentYAxis(void);
CIMGUI_API void ImPlot_UpdateAxisColors(int axis_flag,ImPlotAxis* axis);
CIMGUI_API void ImPlot_UpdateTransformCache(void);
CIMGUI_API ImPlotScale ImPlot_GetCurrentScale(void);
CIMGUI_API bool ImPlot_FitThisFrame(void);
CIMGUI_API void ImPlot_FitPoint(const ImPlotPoint p);
CIMGUI_API bool ImPlot_RangesOverlap(const ImPlotRange r1,const ImPlotRange r2);
CIMGUI_API void ImPlot_PushLinkedAxis(ImPlotAxis* axis);
CIMGUI_API void ImPlot_PullLinkedAxis(ImPlotAxis* axis);
CIMGUI_API void ImPlot_ShowAxisContextMenu(ImPlotAxis* axis,ImPlotAxis* equal_axis,bool time_allowed);
CIMGUI_API void ImPlot_GetLocationPos(ImVec2 *pOut,const ImRect outer_rect,const ImVec2 inner_size,ImPlotLocation location,const ImVec2 pad);
CIMGUI_API void ImPlot_CalcLegendSize(ImVec2 *pOut,ImPlotPlot* plot,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation);
CIMGUI_API void ImPlot_ShowLegendEntries(ImPlotPlot* plot,const ImRect legend_bb,bool interactable,const ImVec2 pad,const ImVec2 spacing,ImPlotOrientation orientation,ImDrawList* DrawList);
CIMGUI_API void ImPlot_ShowAltLegend(const char* title_id,ImPlotOrientation orientation,const ImVec2 size,bool interactable);
CIMGUI_API void ImPlot_LabelTickDefault(ImPlotTick* tick,ImGuiTextBuffer* buffer);
CIMGUI_API void ImPlot_LabelTickScientific(ImPlotTick* tick,ImGuiTextBuffer* buffer);
CIMGUI_API void ImPlot_LabelTickTime(ImPlotTick* tick,ImGuiTextBuffer* buffer,const ImPlotTime t,ImPlotDateTimeFmt fmt);
CIMGUI_API void ImPlot_AddTicksDefault(const ImPlotRange range,int nMajor,int nMinor,ImPlotTickCollection* ticks);
CIMGUI_API void ImPlot_AddTicksLogarithmic(const ImPlotRange range,int nMajor,ImPlotTickCollection* ticks);
CIMGUI_API void ImPlot_AddTicksTime(const ImPlotRange range,float plot_width,ImPlotTickCollection* ticks);
CIMGUI_API void ImPlot_AddTicksCustom(const double* values,const char* const labels[],int n,ImPlotTickCollection* ticks);
CIMGUI_API int ImPlot_LabelAxisValue(const ImPlotAxis axis,const ImPlotTickCollection ticks,double value,char* buff,int size);
CIMGUI_API const ImPlotNextItemData* ImPlot_GetItemData(void);
CIMGUI_API bool ImPlot_IsColorAutoVec4(const ImVec4 col);
CIMGUI_API bool ImPlot_IsColorAutoPlotCol(ImPlotCol idx);
CIMGUI_API void ImPlot_GetAutoColor(ImVec4 *pOut,ImPlotCol idx);
CIMGUI_API void ImPlot_GetStyleColorVec4(ImVec4 *pOut,ImPlotCol idx);
CIMGUI_API ImU32 ImPlot_GetStyleColorU32(ImPlotCol idx);
CIMGUI_API const ImVec4* ImPlot_GetColormap(ImPlotColormap colormap,int* size_out);
CIMGUI_API void ImPlot_LerpColormapVec4Ptr(ImVec4 *pOut,const ImVec4* colormap,int size,float t);
CIMGUI_API void ImPlot_ResampleColormap(const ImVec4* colormap_in,int size_in,ImVec4* colormap_out,int size_out);
CIMGUI_API void ImPlot_AddTextVertical(ImDrawList* DrawList,ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
CIMGUI_API void ImPlot_CalcTextSizeVertical(ImVec2 *pOut,const char* text);
CIMGUI_API ImU32 ImPlot_CalcTextColor(const ImVec4 bg);
CIMGUI_API void ImPlot_ClampLabelPos(ImVec2 *pOut,ImVec2 pos,const ImVec2 size,const ImVec2 Min,const ImVec2 Max);
CIMGUI_API double ImPlot_NiceNum(double x,bool round);
CIMGUI_API int ImPlot_OrderOfMagnitude(double val);
CIMGUI_API int ImPlot_OrderToPrecision(int order);
CIMGUI_API int ImPlot_Precision(double val);
CIMGUI_API void ImPlot_Intersection(ImVec2 *pOut,const ImVec2 a1,const ImVec2 a2,const ImVec2 b1,const ImVec2 b2);
CIMGUI_API void ImPlot_FillRangeVector_FloatPtr(ImVector_float* buffer,int n,float vmin,float vmax);
CIMGUI_API void ImPlot_FillRangeVector_doublePtr(ImVector_double* buffer,int n,double vmin,double vmax);
CIMGUI_API void ImPlot_FillRangeVector_S8Ptr(ImVector_ImS8* buffer,int n,ImS8 vmin,ImS8 vmax);
CIMGUI_API void ImPlot_FillRangeVector_U8Ptr(ImVector_ImU8* buffer,int n,ImU8 vmin,ImU8 vmax);
CIMGUI_API void ImPlot_FillRangeVector_S16Ptr(ImVector_ImS16* buffer,int n,ImS16 vmin,ImS16 vmax);
CIMGUI_API void ImPlot_FillRangeVector_U16Ptr(ImVector_ImU16* buffer,int n,ImU16 vmin,ImU16 vmax);
CIMGUI_API void ImPlot_FillRangeVector_S32Ptr(ImVector_ImS32* buffer,int n,ImS32 vmin,ImS32 vmax);
CIMGUI_API void ImPlot_FillRangeVector_U32Ptr(ImVector_ImU32* buffer,int n,ImU32 vmin,ImU32 vmax);
CIMGUI_API void ImPlot_FillRangeVector_S64Ptr(ImVector_ImS64* buffer,int n,ImS64 vmin,ImS64 vmax);
CIMGUI_API void ImPlot_FillRangeVector_U64Ptr(ImVector_ImU64* buffer,int n,ImU64 vmin,ImU64 vmax);
CIMGUI_API float ImPlot_OffsetAndStrideFloatPtr(const float* data,int idx,int count,int offset,int stride);
CIMGUI_API double ImPlot_OffsetAndStridedoublePtr(const double* data,int idx,int count,int offset,int stride);
CIMGUI_API ImS8 ImPlot_OffsetAndStrideS8Ptr(const ImS8* data,int idx,int count,int offset,int stride);
CIMGUI_API ImU8 ImPlot_OffsetAndStrideU8Ptr(const ImU8* data,int idx,int count,int offset,int stride);
CIMGUI_API ImS16 ImPlot_OffsetAndStrideS16Ptr(const ImS16* data,int idx,int count,int offset,int stride);
CIMGUI_API ImU16 ImPlot_OffsetAndStrideU16Ptr(const ImU16* data,int idx,int count,int offset,int stride);
CIMGUI_API ImS32 ImPlot_OffsetAndStrideS32Ptr(const ImS32* data,int idx,int count,int offset,int stride);
CIMGUI_API ImU32 ImPlot_OffsetAndStrideU32Ptr(const ImU32* data,int idx,int count,int offset,int stride);
CIMGUI_API ImS64 ImPlot_OffsetAndStrideS64Ptr(const ImS64* data,int idx,int count,int offset,int stride);
CIMGUI_API ImU64 ImPlot_OffsetAndStrideU64Ptr(const ImU64* data,int idx,int count,int offset,int stride);
CIMGUI_API bool ImPlot_IsLeapYear(int year);
CIMGUI_API int ImPlot_GetDaysInMonth(int year,int month);
CIMGUI_API ImPlotTime ImPlot_MkGmtTime(struct tm* ptm);
CIMGUI_API tm* ImPlot_GetGmtTime(const ImPlotTime t,tm* ptm);
CIMGUI_API ImPlotTime ImPlot_MkLocTime(struct tm* ptm);
CIMGUI_API tm* ImPlot_GetLocTime(const ImPlotTime t,tm* ptm);
CIMGUI_API ImPlotTime ImPlot_MakeTime(int year,int month,int day,int hour,int min,int sec,int us);
CIMGUI_API int ImPlot_GetYear(const ImPlotTime t);
CIMGUI_API ImPlotTime ImPlot_AddTime(const ImPlotTime t,ImPlotTimeUnit unit,int count);
CIMGUI_API ImPlotTime ImPlot_FloorTime(const ImPlotTime t,ImPlotTimeUnit unit);
CIMGUI_API ImPlotTime ImPlot_CeilTime(const ImPlotTime t,ImPlotTimeUnit unit);
CIMGUI_API ImPlotTime ImPlot_RoundTime(const ImPlotTime t,ImPlotTimeUnit unit);
CIMGUI_API ImPlotTime ImPlot_CombineDateTime(const ImPlotTime date_part,const ImPlotTime time_part);
CIMGUI_API int ImPlot_FormatTime(const ImPlotTime t,char* buffer,int size,ImPlotTimeFmt fmt,bool use_24_hr_clk);
CIMGUI_API int ImPlot_FormatDate(const ImPlotTime t,char* buffer,int size,ImPlotDateFmt fmt,bool use_iso_8601);
CIMGUI_API int ImPlot_FormatDateTime(const ImPlotTime t,char* buffer,int size,ImPlotDateTimeFmt fmt);
CIMGUI_API bool ImPlot_ShowDatePicker(const char* id,int* level,ImPlotTime* t,const ImPlotTime* t1,const ImPlotTime* t2);
CIMGUI_API bool ImPlot_ShowTimePicker(const char* id,ImPlotTime* t);
CIMGUI_API void ImPlot_PlotRectsFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotRectsdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride);
CIMGUI_API void ImPlot_PlotRectsFnPlotPoIntPtr(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset);


typedef void *(*ImPlotPoint_getter)(void* data, int idx, ImPlotPoint *point);

//ImPlotPoint getters manually wrapped
CIMGUI_API void ImPlot_PlotLineG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,int offset);
CIMGUI_API  void ImPlot_PlotScatterG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset);
CIMGUI_API void ImPlot_PlotShadedG(const char* label_id, ImPlotPoint_getter getter1, void* data1, ImPlotPoint_getter getter2, void* data2, int count, int offset);
CIMGUI_API void ImPlot_PlotBarsG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double width, int offset);
CIMGUI_API void ImPlot_PlotBarsHG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double height,  int offset);
CIMGUI_API void ImPlot_PlotDigitalG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset);

#endif //CIMGUIPLOT_INCLUDED




